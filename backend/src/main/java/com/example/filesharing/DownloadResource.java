package com.example.filesharing.resources;import com.example.filesharing.Model.FileInfo;import com.example.filesharing.Storage;import jakarta.ws.rs.*;import jakarta.ws.rs.core.Response;import jakarta.ws.rs.core.StreamingOutput;import jakarta.ws.rs.core.MediaType;import java.io.*;import java.nio.file.Files;import java.time.Duration;@Path("/download")public class DownloadResource {    @GET    @Path("/{token}")    @Produces(MediaType.APPLICATION_OCTET_STREAM)    public Response downloadFile(@PathParam("token") String token) {        FileInfo info = Storage.downloadMap.get(token);        if (info == null || isExpired(info.uploadTime)) {            return Response.status(Response.Status.NOT_FOUND).entity("File not found or expired").build();        }        File file = new File(info.fileName);        if (!file.exists()) {            return Response.status(Response.Status.NOT_FOUND).entity("File not found").build();        }        StreamingOutput stream = output -> {            try (InputStream is = new FileInputStream(file)) {                is.transferTo(output);            }        };        return Response.ok(stream)                .header("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"")                .header("Access-Control-Allow-Origin", "*")                .build();    }    private boolean isExpired(long uploadTime) {        return System.currentTimeMillis() - uploadTime > Duration.ofDays(30).toMillis();    }}